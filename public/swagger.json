{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Field": {
				"properties": {
					"label": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"key": {
						"type": "string"
					}
				},
				"required": [
					"label",
					"value",
					"key"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Error": {
				"properties": {
					"message": {
						"type": "string"
					},
					"field": {
						"$ref": "#/components/schemas/Field"
					}
				},
				"required": [
					"message",
					"field"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationErrorResponse": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"status": {
						"type": "boolean"
					},
					"errors": {
						"items": {
							"$ref": "#/components/schemas/Error"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"message",
					"status",
					"errors"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IRoomInputDTO": {
				"properties": {
					"name": {
						"type": "string"
					},
					"floor": {
						"type": "number",
						"format": "double"
					},
					"capacity": {
						"type": "number",
						"format": "double"
					},
					"assets": {
						"properties": {
							"parkingAndFacilities": {
								"properties": {
									"paidParkingGarageOffPremises": {
										"type": "boolean"
									},
									"paidParkingGarageOnPremises": {
										"type": "boolean"
									},
									"evCharger": {
										"type": "boolean"
									},
									"privateGym": {
										"type": "boolean"
									},
									"gym": {
										"type": "boolean"
									},
									"elevator": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"entertainment": {
								"properties": {
									"exerciseEquipment": {
										"type": "boolean"
									},
									"bluetoothSoundSystem": {
										"type": "boolean"
									},
									"booksAndReadingMaterial": {
										"type": "boolean"
									},
									"gameConsole": {
										"type": "boolean"
									},
									"tv": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"internetAndOffice": {
								"properties": {
									"dedicatedWorkspace": {
										"type": "boolean"
									},
									"wiFi": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"bedroomAndLaundry": {
								"properties": {
									"clothingStorage": {
										"type": "boolean"
									},
									"iron": {
										"type": "boolean"
									},
									"roomDarkeningShades": {
										"type": "boolean"
									},
									"extraPillowsAndBlankets": {
										"type": "boolean"
									},
									"bedLinens": {
										"type": "boolean"
									},
									"hangers": {
										"type": "boolean"
									},
									"essentials": {
										"type": "boolean"
									},
									"dryer": {
										"type": "boolean"
									},
									"washer": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"heatingAndCooling": {
								"properties": {
									"radiantHeating": {
										"type": "boolean"
									},
									"ceilingFan": {
										"type": "boolean"
									},
									"indoorFireplace": {
										"type": "boolean"
									},
									"heating": {
										"type": "boolean"
									},
									"portableFans": {
										"type": "boolean"
									},
									"airConditioning": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"bathroom": {
								"properties": {
									"cleaningProducts": {
										"type": "boolean"
									},
									"showerGel": {
										"type": "boolean"
									},
									"hotWater": {
										"type": "boolean"
									},
									"bodySoap": {
										"type": "boolean"
									},
									"conditioner": {
										"type": "boolean"
									},
									"shampoo": {
										"type": "boolean"
									},
									"hairDryer": {
										"type": "boolean"
									},
									"bathtub": {
										"type": "boolean"
									}
								},
								"type": "object"
							},
							"kitchenAndDining": {
								"properties": {
									"barbecueUtensils": {
										"type": "boolean"
									},
									"oven": {
										"type": "boolean"
									},
									"cookingBasics": {
										"type": "boolean"
									},
									"diningTable": {
										"type": "boolean"
									},
									"trashCompactor": {
										"type": "boolean"
									},
									"toaster": {
										"type": "boolean"
									},
									"wineGlasses": {
										"type": "boolean"
									},
									"coffeeMaker": {
										"type": "boolean"
									},
									"hotWaterKettle": {
										"type": "boolean"
									},
									"stove": {
										"type": "boolean"
									},
									"dishwasher": {
										"type": "boolean"
									},
									"freezer": {
										"type": "boolean"
									},
									"dishesAndSilverware": {
										"type": "boolean"
									},
									"microwave": {
										"type": "boolean"
									},
									"refrigerator": {
										"type": "boolean"
									},
									"kitchen": {
										"type": "boolean"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"name",
					"floor"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUserInputDTO": {
				"properties": {
					"name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"repeatPassword": {
						"type": "string"
					},
					"acceptTerms": {
						"type": "boolean"
					}
				},
				"required": [
					"name",
					"username",
					"email",
					"password",
					"repeatPassword",
					"acceptTerms"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ITokenInputDTO": {
				"properties": {
					"token": {
						"type": "string"
					}
				},
				"required": [
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LoggedUserResponse": {
				"properties": {
					"auth": {
						"type": "boolean"
					},
					"jwtToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					},
					"isTwoFactorAuthenticationEnabled": {
						"type": "boolean"
					}
				},
				"required": [
					"auth",
					"jwtToken",
					"refreshToken",
					"isTwoFactorAuthenticationEnabled"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUserLoginDTO": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUserEmailDTO": {
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUserPasswordResetDTO": {
				"properties": {
					"token": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"repeatPassword": {
						"type": "string"
					}
				},
				"required": [
					"token",
					"password",
					"repeatPassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IUser2FACodeDTO": {
				"properties": {
					"code": {
						"type": "string"
					}
				},
				"required": [
					"code"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"description": "JWT Authorization header using the Bearer scheme.\n\nEnter your token in the text input below.\n\n Example: \"12345abcdef\"\n\n Name: Authorization\n\nIn: header"
			}
		}
	},
	"info": {
		"title": "booking-room-app",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"openapi": "3.0.0",
	"paths": {
		"/room/add": {
			"post": {
				"operationId": "AddNewRoom",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "name is not allowed to be empty",
													"field": {
														"label": "name",
														"value": "",
														"key": "name"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Rooms"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IRoomInputDTO"
							}
						}
					}
				}
			}
		},
		"/auth/register": {
			"post": {
				"operationId": "Register",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "name is not allowed to be empty",
													"field": {
														"label": "name",
														"value": "",
														"key": "name"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Register a new user account and send a verification email.\nThe first account registered in the system is assigned the `ADMIN` role, other accounts are assigned the `GUEST` role.",
				"tags": [
					"Authentication (Email sign up and verification & Forgot password and reset password functionality)"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUserInputDTO"
							}
						}
					}
				}
			}
		},
		"/auth/verify-email": {
			"post": {
				"operationId": "VerifyAccount",
				"responses": {
					"200": {
						"description": "Verified",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "token is not allowed to be empty",
													"field": {
														"label": "token",
														"value": "",
														"key": "token"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Verify a new account with a verification token received by email after registration",
				"tags": [
					"Authentication (Email sign up and verification & Forgot password and reset password functionality)"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ITokenInputDTO"
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "LoggedIn",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoggedUserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "email is not allowed to be empty",
													"field": {
														"label": "email",
														"value": "",
														"key": "email"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Authenticate account credentials and return a JWT token and refresh token.",
				"tags": [
					"Authentication (Email sign up and verification & Forgot password and reset password functionality)"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUserLoginDTO"
							}
						}
					}
				}
			}
		},
		"/auth/forgot-password": {
			"post": {
				"operationId": "ForgotPassword",
				"responses": {
					"200": {
						"description": "Email was sent",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "email is not allowed to be empty",
													"field": {
														"label": "email",
														"value": "",
														"key": "email"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Send a token to the email which will allow you to reset the password of the account",
				"tags": [
					"Authentication (Email sign up and verification & Forgot password and reset password functionality)"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUserEmailDTO"
							}
						}
					}
				}
			}
		},
		"/auth/reset-password": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "Password was successfully reset",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "password is not allowed to be empty",
													"field": {
														"label": "password",
														"value": "",
														"key": "password"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Password reset token received in the email from the forgot password step",
				"tags": [
					"Authentication (Email sign up and verification & Forgot password and reset password functionality)"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUserPasswordResetDTO"
							}
						}
					}
				}
			}
		},
		"/auth/refresh-token": {
			"post": {
				"operationId": "RefreshToken",
				"responses": {
					"200": {
						"description": "Refreshed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoggedUserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "token is not allowed to be empty",
													"field": {
														"label": "token",
														"value": "",
														"key": "token"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Use a refresh token to generate a new JWT token and a new refresh token",
				"tags": [
					"Refresh tokens (JWT authentication with refresh tokens)"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ITokenInputDTO"
							}
						}
					}
				}
			}
		},
		"/auth/revoke-token": {
			"post": {
				"operationId": "RevokeToken",
				"responses": {
					"200": {
						"description": "Revoked",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationErrorResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"name": "Validation Error.",
											"message": "Some fields are not valid.",
											"status": false,
											"errors": [
												{
													"message": "token is not allowed to be empty",
													"field": {
														"label": "token",
														"value": "",
														"key": "token"
													}
												}
											]
										}
									}
								}
							}
						}
					}
				},
				"description": "Revoke a refresh token.\nAdmin users can revoke the tokens of any account, regular users can only revoke their own tokens.",
				"tags": [
					"Refresh tokens (JWT authentication with refresh tokens)"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ITokenInputDTO"
							}
						}
					}
				}
			}
		},
		"/auth/2fa/generate": {
			"post": {
				"operationId": "GenerateTwoFactorAuthenticationCode",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Applications like the Google Authenticator allow users to add a page that they authenticate to either by manually entering a `key`, or scanning a `QR` code.\nQR code in writable stream in response object.",
				"tags": [
					"Two-Factor Authentication (2FA)"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/auth/2fa/turn-on": {
			"post": {
				"operationId": "TurnOnTwoFactorAuthentication",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "We check if the provided `code` is valid. If that's the case, we enable the Two-Factor Authentication.",
				"tags": [
					"Two-Factor Authentication (2FA)"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUser2FACodeDTO"
							}
						}
					}
				}
			}
		},
		"/auth/2fa/authenticate": {
			"post": {
				"operationId": "SecondFactorAuthentication",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoggedUserResponse"
								}
							}
						}
					}
				},
				"description": "1. The user attempts to log in using his `email` and a valid `password`, and we give him a JWT token.\n   - if he doesn't have the `2FA` turned on, this gives him full access.\n   - if he does have the `2FA` turned on, we provide him with access just to the /2fa/authenticate endpoint.\n2. The user sends a valid code to the /2fa/authenticate endpoint and is given a new JWT token with full access.",
				"tags": [
					"Two-Factor Authentication (2FA)"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUser2FACodeDTO"
							}
						}
					}
				}
			}
		},
		"/user/upload-avatar/{userId}": {
			"put": {
				"operationId": "UploadAvatarImg",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "Upload User Avatar",
				"tags": [
					"Files"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"avatar": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"avatar"
								]
							}
						}
					}
				}
			}
		},
		"/user/upload-file/{userId}": {
			"put": {
				"operationId": "UploadFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "Upload file (pdf, csv, xlsx)",
				"tags": [
					"Files"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"file"
								]
							}
						}
					}
				}
			}
		},
		"/user/upload-files/{userId}": {
			"post": {
				"operationId": "UploadFiles",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"tags": [
					"Files"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"files": {
										"items": {
											"type": "string",
											"format": "binary"
										},
										"type": "array"
									}
								},
								"required": [
									"files"
								]
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	]
}